package FTC_2019_2020_Season;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.tfod.TFObjectDetector;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.tfod.Recognition;
import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.util.ElapsedTime;
import java.util.List;
import android.graphics.Color;
import java.util.Locale;

@Autonomous(name = "Blue Foundation Bridge", group = "Auto")
public class Blue_Foundation_Bridge_Twin extends LinearOpMode {

  /* Declare OpMode members. */
  RobotHardware robot = new RobotHardware();
  private ElapsedTime runtime = new ElapsedTime();

  @Override
  public void runOpMode() {
    
  
   
  robot.init(hardwareMap);

  while (!isStopRequested() && !robot.imu.isGyroCalibrated()) {
      sleep(50);
      idle();
  }

  // Wait for the game to start (driver presses PLAY)
  /** Wait for the game to begin */
   telemetry.addData(">", "Press Play to start tracking");
   telemetry.addData("imu calib status", robot.imu.getCalibrationStatus().toString());
   telemetry.update();
   waitForStart();
  if (opModeIsActive()){

  // // Backward
  //  robot.forwardByEncoder(0.25, 4400);
  //  sleep(100);

  // // Move to Foundation
  //  robot.rightByEncoder(0.75, 8000);
  //  sleep(100);
   
  //  // Move to Foundation
  //  robot.rightByEncoder(0.2, 600);
  //  sleep(100);

  // // Grab Foundation
  // // robot.hook0.setPosition(1);
  // robot.hook0.setPosition(0.5);   
  // robot.hook1.setPosition(-0.43);
  // sleep(1750);

  // // Pull Foundation Away Approx. 9in
  //  robot.leftByEncoder(0.5, -4200);
  
  // // Turn Foundation left
  //  // robot.resetAngle();
  //  robot.rotate(90, 0.75);
  //  sleep(100);
    
    
  //  // Move to Wall
  //  robot.right();
  //  sleep(1000);
  //  robot.stop();

  // //Release Foundation
  //  // robot.hook0.setPosition(-0.6);
  //  robot.hook0.setPosition(-0.45);
  //  robot.hook1.setPosition(0.6);
  //  sleep(1000);
   
   
  //  robot.leftByEncoder(0.2 , -1700);
   
  //  //spin left 90
  //  robot.resetAngle();
  //  robot.rotate(-70, 0.5);
  //  sleep(100);
   
  // // Move back to wall
  //  robot.rightByEncoder(0.2 , 700);
  //  sleep(100);
  //  robot.stop();
   
  // Move to navigate
   backwardByEncoder(0.5, -9900);
   robot.stop();
   
  }
  robot.stop();
 }
     // Method for encoder BACKWARD mpovement
     private void backwardByEncoder(double speed, double distance){
         robot.reset();
         // while (((-bl.getCurrentPosition() < distance)) && (distance - -bl.getCurrentPosition)){
         while (((-robot.bl.getCurrentPosition() > distance)) && !isStopRequested()){
          robot.fl.setPower(-speed);
          robot.fr.setPower(-speed);
          robot.bl.setPower(-speed);
          robot.br.setPower(-speed);
          // -speed was BACKWARD
         
         }
         robot.fl.setPower(0);
         robot.fr.setPower(0);
         robot.bl.setPower(0);
         robot.br.setPower(0);
     }    
}

